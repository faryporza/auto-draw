import cv2
import time
import threading
import keyboard  # ‡∏ï‡πâ‡∏≠‡∏á‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á‡∏î‡πâ‡∏ß‡∏¢ pip install keyboard
import pydirectinput  # ‡∏ï‡πâ‡∏≠‡∏á‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á‡∏î‡πâ‡∏ß‡∏¢ pip install pydirectinput
import pyautogui
import numpy as np # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏Ç‡πâ‡∏≤‡∏°‡∏≤

# ‡πÇ‡∏´‡∏•‡∏î‡∏†‡∏≤‡∏û‡πÅ‡∏•‡∏∞‡∏´‡∏≤‡πÄ‡∏™‡πâ‡∏ô‡∏Ç‡∏≠‡∏ö
img = cv2.imread("image.png", 0)
if img is None:
    print("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå image.png ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏™‡∏µ‡∏¢‡∏´‡∏≤‡∏¢")
    exit()

edges = cv2.Canny(img, 50, 150)
contours, _ = cv2.findContours(edges, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_NONE)

print(f"üîç ‡∏û‡∏ö contours ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô: {len(contours)}")

# ‡∏Ñ‡πà‡∏≤‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°
origin_x, origin_y = 0, 0
origin_set = False
should_stop = False
drawing_speed = "medium"  # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡πá‡∏ß

# ‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡πá‡∏ß
SPEED_SETTINGS = {
    "very_slow": {
        "move_duration": 0.05,
        "draw_duration": 0.03,
        "line_delay": 0.5,
        "mouse_delay": 0.2
    },
    "slow": {
        "move_duration": 0.03,
        "draw_duration": 0.02,
        "line_delay": 0.3,
        "mouse_delay": 0.15
    },
    "medium": {
        "move_duration": 0.02,
        "draw_duration": 0.01,
        "line_delay": 0.1,
        "mouse_delay": 0.1
    },
    "fast": {
        "move_duration": 0.01,
        "draw_duration": 0.005,
        "line_delay": 0.05,
        "mouse_delay": 0.05
    },
    "very_fast": {
        "move_duration": 0.005,
        "draw_duration": 0.001,
        "line_delay": 0.01,
        "mouse_delay": 0.02
    }
}

def show_preview():
    """‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÅ‡∏•‡∏∞‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏†‡∏≤‡∏û preview ‡πÅ‡∏•‡πâ‡∏ß‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•"""
    global drawing_speed
    
    print("üñºÔ∏è  ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á preview...")
    
    # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏†‡∏≤‡∏û‡∏™‡∏µ 3 ‡∏ä‡πà‡∏≠‡∏á‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö preview
    preview_img = cv2.cvtColor(img, cv2.COLOR_GRAY2BGR)
    edges_colored = cv2.cvtColor(edges, cv2.COLOR_GRAY2BGR)
    
    # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏†‡∏≤‡∏û‡∏ß‡πà‡∏≤‡∏á‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏™‡∏î‡∏á contours
    contours_img = np.zeros_like(preview_img)
    
    # ‡∏ß‡∏≤‡∏î contours ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏î‡πâ‡∏ß‡∏¢‡∏™‡∏µ‡∏ï‡πà‡∏≤‡∏á‡πÜ
    for i, cnt in enumerate(contours):
        arc_length = cv2.arcLength(cnt, False)
        if arc_length >= 20:  # ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏ß‡∏≤‡∏î‡∏à‡∏£‡∏¥‡∏á
            color = (0, 255, 0)  # ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ß‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏ß‡∏≤‡∏î
        else:
            color = (0, 0, 255)  # ‡πÅ‡∏î‡∏á‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏Ç‡πâ‡∏≤‡∏°
        
        cv2.drawContours(contours_img, [cnt], -1, color, 2)
        cv2.drawContours(preview_img, [cnt], -1, color, 1)
    
    print("‚úÖ ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏†‡∏≤‡∏û‡πÄ‡∏™‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß")
    
    # ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏†‡∏≤‡∏û
    print("\nüñºÔ∏è  ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏†‡∏≤‡∏û:")
    print(f"   - ‡∏Ç‡∏ô‡∏≤‡∏î‡∏†‡∏≤‡∏û: {img.shape[1]} x {img.shape[0]} pixels")
    print(f"   - ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô contours ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î: {len(contours)}")
    
    # ‡∏ô‡∏±‡∏ö contours ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Ç‡∏ô‡∏≤‡∏î‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°
    valid_contours = 0
    total_points = 0
    for cnt in contours:
        arc_length = cv2.arcLength(cnt, False)
        if arc_length >= 20:
            valid_contours += 1
            total_points += len(cnt)
    
    print(f"   - ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô contours ‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏ß‡∏≤‡∏î: {valid_contours}")
    print(f"   - ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏à‡∏∏‡∏î‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î: {total_points}")
    print(f"   - ‡∏Ñ‡πà‡∏≤ Canny edges: 50-150")
    
    # ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏ï‡πà‡∏•‡∏∞ contour
    print("\nüìã ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î contours:")
    for i, cnt in enumerate(contours):
        arc_length = cv2.arcLength(cnt, False)
        area = cv2.contourArea(cnt)
        points_count = len(cnt)
        status = "‚úÖ ‡∏à‡∏∞‡∏ß‡∏≤‡∏î" if arc_length >= 20 else "‚ùå ‡∏Ç‡πâ‡∏≤‡∏°"
        print(f"   - Contour {i+1}: ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏≤‡∏ß={arc_length:.1f}, ‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà={area:.1f}, ‡∏à‡∏∏‡∏î={points_count} {status}")
    
    # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÄ‡∏ß‡∏•‡∏≤‡∏ï‡∏≤‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡πá‡∏ß‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
    speed_config = SPEED_SETTINGS[drawing_speed]
    estimated_time = total_points * speed_config["draw_duration"] + valid_contours * speed_config["line_delay"]
    
    print(f"\nüé® ‡∏Å‡∏≤‡∏£‡∏ß‡∏≤‡∏î‡∏à‡∏∞‡πÉ‡∏ä‡πâ‡πÄ‡∏ß‡∏•‡∏≤‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì: {estimated_time:.1f} ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ")
    
    # ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡πá‡∏ß
    print("\n‚ö° ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡πá‡∏ß‡∏Å‡∏≤‡∏£‡∏ß‡∏≤‡∏î:")
    print("1. Very Slow (‡∏ä‡πâ‡∏≤‡∏°‡∏≤‡∏Å - ‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏†‡∏≤‡∏û‡∏ã‡∏±‡∏ö‡∏ã‡πâ‡∏≠‡∏ô)")
    print("2. Slow (‡∏ä‡πâ‡∏≤ - ‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö)")
    print("3. Medium (‡∏õ‡∏≤‡∏ô‡∏Å‡∏•‡∏≤‡∏á - ‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥) [‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô]")
    print("4. Fast (‡πÄ‡∏£‡πá‡∏ß - ‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î)")
    print("5. Very Fast (‡πÄ‡∏£‡πá‡∏ß‡∏°‡∏≤‡∏Å - ‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á‡∏°‡∏≤‡∏Å)")
    
    while True:
        choice = input("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡πá‡∏ß (1-5) ‡∏´‡∏£‡∏∑‡∏≠‡∏Å‡∏î Enter ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏ä‡πâ‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô: ").strip()
        
        if choice == "" or choice == "3":
            drawing_speed = "medium"
            break
        elif choice == "1":
            drawing_speed = "very_slow"
            break
        elif choice == "2":
            drawing_speed = "slow"
            break
        elif choice == "4":
            drawing_speed = "fast"
            break
        elif choice == "5":
            drawing_speed = "very_fast"
            break
        else:
            print("‚ùå ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç 1-5 ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô")
    
    speed_names = {
        "very_slow": "‡∏ä‡πâ‡∏≤‡∏°‡∏≤‡∏Å",
        "slow": "‡∏ä‡πâ‡∏≤", 
        "medium": "‡∏õ‡∏≤‡∏ô‡∏Å‡∏•‡∏≤‡∏á",
        "fast": "‡πÄ‡∏£‡πá‡∏ß",
        "very_fast": "‡πÄ‡∏£‡πá‡∏ß‡∏°‡∏≤‡∏Å"
    }
    
    # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÄ‡∏ß‡∏•‡∏≤‡πÉ‡∏´‡∏°‡πà‡∏ï‡∏≤‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡πá‡∏ß‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
    speed_config = SPEED_SETTINGS[drawing_speed]
    estimated_time = total_points * speed_config["draw_duration"] + valid_contours * speed_config["line_delay"]
    
    print(f"‚úÖ ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡πá‡∏ß: {speed_names[drawing_speed]}")
    print(f"üïê ‡πÄ‡∏ß‡∏•‡∏≤‡∏Å‡∏≤‡∏£‡∏ß‡∏≤‡∏î‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì: {estimated_time:.1f} ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ")
    print("\nüìù ‡∏Å‡∏î Enter ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡πà‡∏≠ ‡∏´‡∏£‡∏∑‡∏≠ Ctrl+C ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°")
    input("‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏° Enter...")
    
    return True

def wait_for_insert_key():
    global origin_x, origin_y, origin_set
    print("‚å®Ô∏è ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏° Insert (INS) ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏°‡∏∏‡∏°‡∏ã‡πâ‡∏≤‡∏¢‡∏ö‡∏ô...")
    keyboard.wait("insert")
    origin_x, origin_y = pyautogui.position()
    origin_set = True
    print(f"‚úÖ ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏ñ‡∏π‡∏Å‡∏ï‡∏±‡πâ‡∏á‡πÑ‡∏ß‡πâ‡∏ó‡∏µ‡πà: ({origin_x}, {origin_y})")

def watch_for_end_key():
    global should_stop
    keyboard.wait("end")
    should_stop = True
    print("‚õî ‡∏´‡∏¢‡∏∏‡∏î‡∏Å‡∏≤‡∏£‡∏ß‡∏≤‡∏î‡πÅ‡∏•‡πâ‡∏ß (‡∏Å‡∏î End)")

def sort_contours(contours, start_point=(0, 0)):
    """‡∏à‡∏±‡∏î‡πÄ‡∏£‡∏µ‡∏¢‡∏á contours ‡∏ï‡∏≤‡∏°‡∏£‡∏∞‡∏¢‡∏∞‡∏ó‡∏≤‡∏á‡∏ó‡∏µ‡πà‡πÉ‡∏Å‡∏•‡πâ‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î"""
    if not contours:
        return []

    # ‡∏Å‡∏£‡∏≠‡∏á‡πÄ‡∏â‡∏û‡∏≤‡∏∞ contours ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Ç‡∏ô‡∏≤‡∏î‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°
    filtered_contours = []
    for cnt in contours:
        arc_length = cv2.arcLength(cnt, False)
        if arc_length >= 20:  # ‡πÄ‡∏≠‡∏≤‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏¢‡∏≤‡∏ß‡∏û‡∏≠
            filtered_contours.append(cnt)
    
    print(f"üîÑ ‡∏Å‡∏£‡∏≠‡∏á contours: {len(contours)} -> {len(filtered_contours)}")
    
    if not filtered_contours:
        print("‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ß‡∏≤‡∏î")
        return []

    sorted_contours = []
    remaining_contours = list(filtered_contours)
    
    # ‡∏´‡∏≤ contour ‡πÅ‡∏£‡∏Å‡∏ó‡∏µ‡πà‡πÉ‡∏Å‡∏•‡πâ‡∏Å‡∏±‡∏ö start_point ‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î
    def get_distance_to_point(cnt, point):
        # ‡∏´‡∏≤‡∏à‡∏∏‡∏î‡∏ó‡∏µ‡πà‡πÉ‡∏Å‡∏•‡πâ‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î‡πÉ‡∏ô contour ‡∏Å‡∏±‡∏ö point ‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î
        points = cnt.squeeze(axis=1)
        if len(points.shape) == 1:  # ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô 1D array
            points = points.reshape(1, -1)
        distances = np.sqrt(np.sum((points - point)**2, axis=1))
        return np.min(distances)

    # ‡∏´‡∏≤ contour ‡πÅ‡∏£‡∏Å
    first_cnt_index = np.argmin([get_distance_to_point(cnt, start_point) for cnt in remaining_contours])
    current_contour = remaining_contours.pop(first_cnt_index)
    sorted_contours.append(current_contour)
    
    # ‡∏à‡∏∏‡∏î‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢‡∏Ç‡∏≠‡∏á contour ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
    last_point = current_contour.squeeze(axis=1)[-1]

    while remaining_contours:
        # ‡∏´‡∏≤ contour ‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏ó‡∏µ‡πà‡πÉ‡∏Å‡∏•‡πâ‡∏Å‡∏±‡∏ö last_point ‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î
        next_cnt_index = np.argmin([get_distance_to_point(cnt, last_point) for cnt in remaining_contours])
        current_contour = remaining_contours.pop(next_cnt_index)
        sorted_contours.append(current_contour)
        last_point = current_contour.squeeze(axis=1)[-1]
        
    return sorted_contours

def draw():
    global should_stop
    print("üé® ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ß‡∏≤‡∏î...")
    print(f"‚ö° ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡πá‡∏ß: {drawing_speed}")
    
    speed_config = SPEED_SETTINGS[drawing_speed]
    
    # ‡πÇ‡∏ü‡∏Å‡∏±‡∏™‡πÄ‡∏Å‡∏°‡πÄ‡∏£‡πá‡∏ß‡∏Ç‡∏∂‡πâ‡∏ô
    pydirectinput.click(origin_x, origin_y)
    time.sleep(0.2)  # ‡∏•‡∏î‡∏à‡∏≤‡∏Å 0.5
    
    sorted_contours = sort_contours(contours)
    
    if not sorted_contours:
        print("‚ùå ‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ß‡∏≤‡∏î‡πÑ‡∏î‡πâ")
        return
    
    print(f"üìù ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏ß‡∏≤‡∏î: {len(sorted_contours)}")

    for i, cnt in enumerate(sorted_contours, 1):
        if should_stop:
            break

        points = cnt.squeeze()

        if len(points.shape) != 2 or len(points) < 2:
            continue

        print(f"üñåÔ∏è  ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ß‡∏≤‡∏î‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏µ‡πà {i}/{len(sorted_contours)}")

        try:
            pydirectinput.mouseUp()
            time.sleep(speed_config["mouse_delay"] * 0.5)  # ‡∏•‡∏î‡∏•‡∏á‡∏Ñ‡∏£‡∏∂‡πà‡∏á‡∏´‡∏ô‡∏∂‡πà‡∏á
            
            start_x = origin_x + points[0][0]
            start_y = origin_y + points[0][1]
            pydirectinput.moveTo(start_x, start_y, duration=speed_config["move_duration"])
            time.sleep(speed_config["mouse_delay"] * 0.3)  # ‡∏•‡∏î‡∏•‡∏á
            
            pydirectinput.mouseDown()
            time.sleep(speed_config["mouse_delay"] * 0.3)  # ‡∏•‡∏î‡∏•‡∏á

            for pt in points[1:]:
                if should_stop:
                    break
                x, y = origin_x + pt[0], origin_y + pt[1]
                pydirectinput.moveTo(x, y, duration=speed_config["draw_duration"])

        except Exception as e:
            print(f"‚ö†Ô∏è ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏ß‡∏≤‡∏î‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏µ‡πà {i}: {e}")

        finally:
            pydirectinput.mouseUp()
            time.sleep(speed_config["mouse_delay"] * 0.5)  # ‡∏•‡∏î‡∏•‡∏á

        time.sleep(speed_config["line_delay"] * 0.8)  # ‡∏•‡∏î‡∏•‡∏á‡πÄ‡∏•‡πá‡∏Å‡∏ô‡πâ‡∏≠‡∏¢

    print("‚úÖ ‡∏ß‡∏≤‡∏î‡πÄ‡∏™‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡∏´‡∏¢‡∏∏‡∏î‡∏Å‡∏•‡∏≤‡∏á‡∏ó‡∏≤‡∏á")

# ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÉ‡∏ô‡∏™‡πà‡∏ß‡∏ô __main__
if __name__ == "__main__":
    if not show_preview():
        exit()
    
    # ‡πÄ‡∏≠‡∏≤‡∏Ñ‡πà‡∏≤ PAUSE ‡∏≠‡∏≠‡∏Å‡∏´‡∏£‡∏∑‡∏≠‡∏ï‡∏±‡πâ‡∏á‡πÉ‡∏´‡πâ‡∏ï‡πà‡∏≥‡∏°‡∏≤‡∏Å
    pydirectinput.FAILSAFE = False
    pydirectinput.PAUSE = 0.001  # ‡∏•‡∏î‡∏à‡∏≤‡∏Å 0.01 ‡πÄ‡∏õ‡πá‡∏ô 0.001
    
    threading.Thread(target=watch_for_end_key, daemon=True).start()
    wait_for_insert_key()
    
    print("‚åõ ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°‡πÉ‡∏´‡πâ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ô 1 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ...")  # ‡∏•‡∏î‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏ï‡∏±‡∏ß
    time.sleep(1)
    
    draw()