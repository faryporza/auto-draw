import cv2
import time
import threading
import pyautogui
import numpy as np
from collections import deque
import math

# ‡πÅ‡∏Å‡πâ‡∏õ‡∏±‡∏ç‡∏´‡∏≤ keyboard listener ‡∏ö‡∏ô macOS Sequoia
import sys
import select

# ‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û pyautogui
pyautogui.FAILSAFE = False
pyautogui.PAUSE = 0.0001  # ‡∏•‡∏î‡πÉ‡∏´‡πâ‡∏ï‡πà‡∏≥‡∏™‡∏∏‡∏î

# ‡πÇ‡∏´‡∏•‡∏î‡∏†‡∏≤‡∏û‡πÅ‡∏•‡∏∞‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏°‡∏µ‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û
def load_and_process_image(image_path, target_width=None, target_height=None):
    print("üîÑ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î‡πÅ‡∏•‡∏∞‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏†‡∏≤‡∏û...")
    
    # ‡πÇ‡∏´‡∏•‡∏î‡∏†‡∏≤‡∏û‡πÄ‡∏õ‡πá‡∏ô grayscale ‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á
    img = cv2.imread(image_path, cv2.IMREAD_GRAYSCALE)
    if img is None:
        raise FileNotFoundError(f"‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå {image_path}")
    
    h, w = img.shape
    print(f"üìê ‡∏Ç‡∏ô‡∏≤‡∏î‡∏†‡∏≤‡∏û‡∏ï‡πâ‡∏ô‡∏â‡∏ö‡∏±‡∏ö: {w} x {h} pixels")
    
    # ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏£‡∏∞‡∏ö‡∏∏‡∏Ç‡∏ô‡∏≤‡∏î‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢
    if target_width or target_height:
        if target_width and target_height:
            new_w, new_h = target_width, target_height
        elif target_width:
            scale = target_width / w
            new_w, new_h = target_width, int(h * scale)
        else:  # target_height
            scale = target_height / h
            new_w, new_h = int(w * scale), target_height
        
        img = cv2.resize(img, (new_w, new_h))
        print(f"‚úÖ ‡∏õ‡∏£‡∏±‡∏ö‡∏Ç‡∏ô‡∏≤‡∏î‡πÄ‡∏õ‡πá‡∏ô: {new_w} x {new_h} pixels")
    
    # ‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏Ç‡∏≠‡∏ö‡πÅ‡∏ö‡∏ö‡πÄ‡∏£‡πá‡∏ß
    blurred = cv2.GaussianBlur(img, (3, 3), 0)
    edges = cv2.Canny(blurred, 60, 150)
    
    # ‡∏´‡∏≤ contours ‡πÅ‡∏ö‡∏ö‡πÄ‡∏£‡πá‡∏ß
    contours, _ = cv2.findContours(edges, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_TC89_KCOS)
    
    print(f"üîç ‡∏û‡∏ö contours ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô: {len(contours)}")
    return img, contours

# ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡πá‡∏ß‡∏ó‡∏µ‡πà‡πÄ‡∏£‡πá‡∏ß‡∏Ç‡∏∂‡πâ‡∏ô
SPEED_SETTINGS = {
    "very_slow": {"move_duration": 0.02, "draw_duration": 0.01, "line_delay": 0.1},
    "slow": {"move_duration": 0.01, "draw_duration": 0.005, "line_delay": 0.05},
    "medium": {"move_duration": 0.005, "draw_duration": 0.002, "line_delay": 0.02},
    "fast": {"move_duration": 0.002, "draw_duration": 0.001, "line_delay": 0.01},
    "very_fast": {"move_duration": 0.001, "draw_duration": 0.0005, "line_delay": 0.005},
    "ultra_fast": {"move_duration": 0.0005, "draw_duration": 0.0002, "line_delay": 0.002},  # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡πá‡∏ß‡∏™‡∏∏‡∏î
}

class DrawingOptimizer:
    def __init__(self):
        self.origin_x, self.origin_y = 0, 0
        self.origin_set = False
        self.should_stop = False
        self.drawing_speed = "fast"  # ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏õ‡πá‡∏ô fast ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏°‡πà‡∏ô‡∏¢‡∏≥
        self.key_pressed = None
        
    def show_preview(self, img, contours):
        print("üñºÔ∏è ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á preview...")
        
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á preview ‡πÅ‡∏ö‡∏ö‡πÄ‡∏£‡πá‡∏ß
        preview_img = cv2.cvtColor(img, cv2.COLOR_GRAY2BGR)
        
        valid_contours = []
        total_points = 0
        
        # ‡∏Å‡∏£‡∏≠‡∏á contours ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Ç‡∏ô‡∏≤‡∏î‡∏û‡∏≠‡πÄ‡∏´‡∏°‡∏≤‡∏∞
        min_contour_length = 15
        for cnt in contours:
            if len(cnt) >= min_contour_length:
                valid_contours.append(cnt)
                total_points += len(cnt)
                cv2.drawContours(preview_img, [cnt], -1, (0, 255, 0), 1)
        
        print(f"‚úÖ ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏†‡∏≤‡∏û‡πÄ‡∏™‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß")
        print(f"üñºÔ∏è ‡∏Ç‡∏ô‡∏≤‡∏î‡∏†‡∏≤‡∏û: {img.shape[1]} x {img.shape[0]} pixels")
        print(f"   - Contours ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î: {len(contours)}")
        print(f"   - Contours ‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏ß‡∏≤‡∏î: {len(valid_contours)}")
        print(f"   - ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏à‡∏∏‡∏î‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î: {total_points}")
        
        # ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏≠
        screen_width, screen_height = pyautogui.size()
        print(f"üñ•Ô∏è  ‡∏Ç‡∏ô‡∏≤‡∏î‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏≠: {screen_width} x {screen_height} pixels")
        print(f"üìä ‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö: ‡∏†‡∏≤‡∏û‡∏Ñ‡∏∑‡∏≠ {(img.shape[1]/screen_width)*100:.1f}% ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Å‡∏ß‡πâ‡∏≤‡∏á‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏≠")
        
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á preview ‡∏Ç‡∏ô‡∏≤‡∏î‡πÄ‡∏ó‡πà‡∏≤‡∏à‡∏£‡∏¥‡∏á‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏ß‡∏≤‡∏î (overlay ‡∏ö‡∏ô‡∏û‡∏∑‡πâ‡∏ô‡∏´‡∏•‡∏±‡∏á)
        screen_preview = np.zeros((screen_height, screen_width, 3), dtype=np.uint8)
        screen_preview[:, :] = (40, 40, 40)  # ‡∏û‡∏∑‡πâ‡∏ô‡∏´‡∏•‡∏±‡∏á‡∏™‡∏µ‡πÄ‡∏ó‡∏≤‡πÄ‡∏Ç‡πâ‡∏°
        
        # ‡∏ß‡∏≤‡∏á preview ‡∏ó‡∏µ‡πà‡∏°‡∏∏‡∏°‡∏ã‡πâ‡∏≤‡∏¢‡∏ö‡∏ô (0, 0)
        h, w = preview_img.shape[:2]
        if h <= screen_height and w <= screen_width:
            screen_preview[0:h, 0:w] = preview_img
            # ‡∏ß‡∏≤‡∏î‡∏Å‡∏£‡∏≠‡∏ö‡∏™‡∏µ‡πÅ‡∏î‡∏á‡∏£‡∏≠‡∏ö‡∏†‡∏≤‡∏û
            cv2.rectangle(screen_preview, (0, 0), (w-1, h-1), (0, 0, 255), 2)
            cv2.putText(screen_preview, f"Drawing Area: {w}x{h}px", (10, h+30), 
                       cv2.FONT_HERSHEY_SIMPLEX, 0.7, (0, 255, 255), 2)
        
        # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å preview ‡∏ó‡∏±‡πâ‡∏á‡∏™‡∏≠‡∏á
        cv2.imwrite("preview_drawing.png", preview_img)
        cv2.imwrite("preview_fullscreen.png", screen_preview)
        print("‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å preview:")
        print("   - preview_drawing.png (‡∏Ç‡∏ô‡∏≤‡∏î‡∏†‡∏≤‡∏û‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏ß‡∏≤‡∏î)")
        print("   - preview_fullscreen.png (‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡∏Å‡∏±‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏≠‡∏à‡∏£‡∏¥‡∏á)")
        
        # ‡πÅ‡∏™‡∏î‡∏á preview ‡∏ö‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏≠
        try:
            cv2.namedWindow('Preview - Full Screen Comparison', cv2.WINDOW_NORMAL)
            cv2.setWindowProperty('Preview - Full Screen Comparison', cv2.WND_PROP_FULLSCREEN, cv2.WINDOW_FULLSCREEN)
            cv2.imshow('Preview - Full Screen Comparison', screen_preview)
            print("\nüëÅÔ∏è  ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÅ‡∏™‡∏î‡∏á preview ‡πÄ‡∏ï‡πá‡∏°‡∏à‡∏≠...")
            print("   - ‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏µ‡πÄ‡∏ó‡∏≤ = ‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏≠‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì")
            print("   - ‡∏Å‡∏£‡∏≠‡∏ö‡∏™‡∏µÔøΩÔøΩÔøΩ‡∏î‡∏á = ‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏ß‡∏≤‡∏î")
            print("   - ‡∏Å‡∏î 'q' ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡∏¥‡∏î preview")
            
            while True:
                key = cv2.waitKey(100) & 0xFF
                if key == ord('q') or cv2.getWindowProperty('Preview - Full Screen Comparison', cv2.WND_PROP_VISIBLE) < 1:
                    break
            cv2.destroyAllWindows()
        except:
            print("‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÅ‡∏™‡∏î‡∏á preview ‡∏ö‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏≠‡πÑ‡∏î‡πâ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏õ‡∏¥‡∏î‡πÑ‡∏ü‡∏•‡πå preview_fullscreen.png")
        
        # ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡πá‡∏ß
        print("\n‚ö° ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡πá‡∏ß‡∏Å‡∏≤‡∏£‡∏ß‡∏≤‡∏î (‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥: fast ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏°‡πà‡∏ô‡∏¢‡∏≥):")
        speeds = list(SPEED_SETTINGS.keys())
        for i, speed in enumerate(speeds, 1):
            print(f"{i}. {speed} {'‚úÖ ‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥' if speed == 'fast' else ''}")
        
        choice = input(f"‡πÄ‡∏•‡∏∑‡∏≠‡∏Å (1-{len(speeds)}) ‡∏´‡∏£‡∏∑‡∏≠ Enter ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏ä‡πâ‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô: ").strip()
        
        if choice.isdigit() and 1 <= int(choice) <= len(speeds):
            self.drawing_speed = speeds[int(choice) - 1]
        else:
            self.drawing_speed = "fast"
        
        # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÄ‡∏ß‡∏•‡∏≤
        speed_config = SPEED_SETTINGS[self.drawing_speed]
        estimated_time = (total_points * speed_config["draw_duration"] + 
                         len(valid_contours) * speed_config["line_delay"])
        
        print(f"\n‚úÖ ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡πá‡∏ß: {self.drawing_speed}")
        print(f"‚åõ ‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì‡πÄ‡∏ß‡∏•‡∏≤‡∏Å‡∏≤‡∏£‡∏ß‡∏≤‡∏î: {estimated_time:.1f} ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ")
        print(f"‚úèÔ∏è ‡πÇ‡∏´‡∏°‡∏î: ‡∏ß‡∏≤‡∏î‡∏ó‡∏∏‡∏Å‡∏à‡∏∏‡∏î‡∏ï‡∏≤‡∏°‡∏•‡∏≥‡∏î‡∏±‡∏ö (‡πÑ‡∏°‡πà‡∏Ç‡πâ‡∏≤‡∏°)")
        
        input("\n‡∏Å‡∏î Enter ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ó‡∏≥‡∏á‡∏≤‡∏ô...")
        return valid_contours
    
    def check_keyboard_simple(self):
        """‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏µ‡∏¢‡πå‡∏ö‡∏≠‡∏£‡πå‡∏î‡πÅ‡∏ö‡∏ö‡∏á‡πà‡∏≤‡∏¢ ‡πÜ ‡πÇ‡∏î‡∏¢‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πâ pynput (‡πÅ‡∏Å‡πâ‡∏õ‡∏±‡∏ç‡∏´‡∏≤ macOS Sequoia)"""
        print("\n‚å®Ô∏è ‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô:")
        print("   1. ‡∏Å‡∏î F6 = ‡∏ï‡∏±‡πâ‡∏á‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á Origin (‡∏à‡∏∏‡∏î‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏ß‡∏≤‡∏î)")
        print("   2. ‡∏Å‡∏î ESC ‡∏´‡∏£‡∏∑‡∏≠ Ctrl+C = ‡∏´‡∏¢‡∏∏‡∏î‡∏Å‡∏≤‡∏£‡∏ß‡∏≤‡∏î")
        print("   3. ‡πÉ‡∏ä‡πâ Accessibility Keyboard ‡∏´‡∏£‡∏∑‡∏≠ Better Touch Tool ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö hotkey")
        print("\nüí° ‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á‡∏à‡∏≤‡∏Å macOS Sequoia ‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏à‡∏≥‡∏Å‡∏±‡∏î‡∏î‡πâ‡∏≤‡∏ô Security:")
        print("   - ‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°‡∏à‡∏∞‡πÉ‡∏ä‡πâ‡∏£‡∏∞‡∏ö‡∏ö‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á Mouse ‡πÅ‡∏ó‡∏ô")
        print("   - ‡πÉ‡∏´‡πâ‡πÄ‡∏•‡∏∑‡πà‡∏≠‡∏ô Mouse ‡πÑ‡∏õ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£ ‡πÅ‡∏•‡πâ‡∏ß‡∏£‡∏≠ 2 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ = ‡∏ï‡∏±‡πâ‡∏á Origin")
        
    def wait_for_origin_by_mouse(self):
        """‡∏£‡∏≠‡πÉ‡∏´‡πâ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÄ‡∏•‡∏∑‡πà‡∏≠‡∏ô mouse ‡πÑ‡∏õ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏•‡∏∞‡∏´‡∏¢‡∏∏‡∏î‡πÑ‡∏ß‡πâ 2 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ"""
        print("\n‚è±Ô∏è  ‡πÄ‡∏•‡∏∑‡πà‡∏≠‡∏ô Mouse ‡πÑ‡∏õ‡∏ó‡∏µ‡πà‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô ‡πÅ‡∏•‡∏∞‡∏≠‡∏¢‡πà‡∏≤‡∏Ç‡∏¢‡∏±‡∏ö Mouse ‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏ß‡∏•‡∏≤ 2 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ...")
        print("   (‡∏´‡∏£‡∏∑‡∏≠‡∏Å‡∏î Ctrl+C ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å)")
        
        last_pos = None
        still_count = 0
        required_still_count = 20  # 2 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ (0.1 x 20)
        
        while not self.should_stop:
            try:
                current_pos = pyautogui.position()
                
                if last_pos == current_pos:
                    still_count += 1
                    if still_count >= required_still_count:
                        self.origin_x, self.origin_y = current_pos
                        self.origin_set = True
                        print(f"\n‚úÖ ‡∏ï‡∏±‡πâ‡∏á Origin ‡∏ó‡∏µ‡πà: ({self.origin_x}, {self.origin_y})")
                        return True
                    elif still_count % 5 == 0:
                        print(f"   ‡∏£‡∏≠... {still_count // 5}/{required_still_count // 5}")
                else:
                    still_count = 0
                    last_pos = current_pos
                
                time.sleep(0.1)
                
            except KeyboardInterrupt:
                self.should_stop = True
                print("\n‚ùå ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡πÇ‡∏î‡∏¢‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ")
                return False
        
        return False


    
    def optimize_contour_order(self, contours):
        """‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏•‡∏≥‡∏î‡∏±‡∏ö contours ‡πÉ‡∏´‡πâ‡∏ß‡∏≤‡∏î‡∏ï‡πà‡∏≠‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏•‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏´‡∏ß‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô"""
        if not contours:
            return []
        
        # ‡∏Å‡∏£‡∏≠‡∏á contours ‡∏ó‡∏µ‡πà‡∏™‡∏±‡πâ‡∏ô‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ
        filtered = [cnt for cnt in contours if len(cnt) >= 10]
        if not filtered:
            return []
        
        # ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏•‡∏≥‡∏î‡∏±‡∏ö‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ KD-tree ‡πÅ‡∏ö‡∏ö‡∏á‡πà‡∏≤‡∏¢ (Nearest Neighbor)
        sorted_contours = []
        remaining = filtered.copy()
        
        # ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏à‡∏≤‡∏Å contour ‡∏ó‡∏µ‡πà‡πÉ‡∏Å‡∏•‡πâ origin ‡∏°‡∏≤‡∏Å‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î
        current_point = np.array([0, 0])
        
        while remaining and not self.should_stop:
            # ‡∏´‡∏≤ contour ‡∏ó‡∏µ‡πà‡πÉ‡∏Å‡∏•‡πâ‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î
            min_dist = float('inf')
            best_idx = 0
            
            for i, cnt in enumerate(remaining):
                start_point = cnt[0][0]
                dist = np.linalg.norm(start_point - current_point)
                
                if dist < min_dist:
                    min_dist = dist
                    best_idx = i
            
            # ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å contour ‡∏ô‡∏±‡πâ‡∏ô
            next_contour = remaining.pop(best_idx)
            sorted_contours.append(next_contour)
            current_point = next_contour[-1][0]  # ‡∏à‡∏∏‡∏î‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î‡∏Ç‡∏≠‡∏á contour
        
        return sorted_contours
    
    def draw_contour_smooth(self, points, speed_config):
        """‡∏ß‡∏≤‡∏î contour ‡πÅ‡∏ö‡∏ö‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏ó‡∏∏‡∏Å‡∏à‡∏∏‡∏î ‡πÑ‡∏°‡πà‡∏Ç‡πâ‡∏≤‡∏°"""
        if len(points) < 2:
            return
        
        # ‡∏ß‡∏≤‡∏î‡∏ó‡∏∏‡∏Å‡∏à‡∏∏‡∏î‡∏ï‡∏≤‡∏°‡∏•‡∏≥‡∏î‡∏±‡∏ö ‡πÑ‡∏°‡πà‡∏Ç‡πâ‡∏≤‡∏°
        for i, pt in enumerate(points):
            if self.should_stop:
                break
            
            x = self.origin_x + int(pt[0])
            y = self.origin_y + int(pt[1])
            
            # ‡πÉ‡∏ä‡πâ duration ‡∏ó‡∏µ‡πà‡πÄ‡∏£‡πá‡∏ß‡∏°‡∏≤‡∏Å‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ß‡∏≤‡∏î‡πÉ‡∏´‡πâ‡∏ï‡πà‡∏≠‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á
            pyautogui.moveTo(x, y, duration=speed_config["draw_duration"])
    
    def draw(self, contours):
        """‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ß‡∏≤‡∏î‡∏´‡∏•‡∏±‡∏Å‡∏ó‡∏µ‡πà‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡πÉ‡∏´‡πâ‡πÄ‡∏£‡πá‡∏ß‡∏Ç‡∏∂‡πâ‡∏ô"""
        self.should_stop = False
        optimized_contours = self.optimize_contour_order(contours)
        speed_config = SPEED_SETTINGS[self.drawing_speed]
        
        print(f"\nüìä ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô contours ‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏ß‡∏≤‡∏î: {len(optimized_contours)}")
        
        start_time = time.time()
        contours_drawn = 0
        points_drawn = 0
        
        for i, cnt in enumerate(optimized_contours):
            if self.should_stop:
                break
            
            points = cnt.squeeze()
            if points.ndim == 1:
                points = points.reshape(1, -1)
            
            # ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ß‡∏≤‡∏î contour ‡∏ô‡∏µ‡πâ
            start_x = self.origin_x + int(points[0][0])
            start_y = self.origin_y + int(points[0][1])
            
            # ‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡∏ó‡∏µ‡πà‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏à‡∏∏‡∏î‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô (‡∏¢‡∏Å‡∏õ‡∏≤‡∏Å‡∏Å‡∏≤‡∏Ç‡∏∂‡πâ‡∏ô)
            pyautogui.mouseUp()
            pyautogui.moveTo(start_x, start_y, duration=speed_config["move_duration"])
            time.sleep(0.001)
            
            # ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ß‡∏≤‡∏î (‡∏Å‡∏î‡∏õ‡∏≤‡∏Å‡∏Å‡∏≤‡∏•‡∏á)
            pyautogui.mouseDown()
            time.sleep(0.001)
            
            # ‡∏ß‡∏≤‡∏î‡∏ó‡∏∏‡∏Å‡∏à‡∏∏‡∏î‡∏ï‡∏≤‡∏°‡∏•‡∏≥‡∏î‡∏±‡∏ö ‡πÑ‡∏°‡πà‡∏Ç‡πâ‡∏≤‡∏°
            self.draw_contour_smooth(points[1:], speed_config)
            
            # ‡∏à‡∏ö contour ‡∏ô‡∏µ‡πâ (‡∏¢‡∏Å‡∏õ‡∏≤‡∏Å‡∏Å‡∏≤‡∏Ç‡∏∂‡πâ‡∏ô)
            pyautogui.mouseUp()
            time.sleep(0.001)
            
            # ‡∏û‡∏±‡∏Å‡πÄ‡∏ö‡∏≤‡πÜ ‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á contours
            if speed_config["line_delay"] > 0:
                time.sleep(speed_config["line_delay"])
            
            contours_drawn += 1
            points_drawn += len(points)
            
            # ‡πÅ‡∏™‡∏î‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏∑‡∏ö‡∏´‡∏ô‡πâ‡∏≤
            if (i + 1) % 10 == 0:
                progress = (i + 1) / len(optimized_contours) * 100
                print(f"üìà ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏∑‡∏ö‡∏´‡∏ô‡πâ‡∏≤: {progress:.1f}% ({i + 1}/{len(optimized_contours)})")
        
        end_time = time.time()
        total_time = end_time - start_time
        
        print(f"\n‚úÖ ‡∏ß‡∏≤‡∏î‡πÄ‡∏™‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß!")
        print(f"üìä ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥:")
        print(f"   - Contours ‡∏ó‡∏µ‡πà‡∏ß‡∏≤‡∏î: {contours_drawn}")
        print(f"   - ‡∏à‡∏∏‡∏î‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î: {points_drawn}")
        print(f"   - ‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ: {total_time:.2f} ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ")
        print(f"   - ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡πá‡∏ß‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢: {points_drawn/total_time:.1f} ‡∏à‡∏∏‡∏î/‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ")

# MAIN PROGRAM
def main():
    print("üöÄ macOS Drawing Bot (Optimized Version)")
    print("=" * 50)
    
    try:
        # ‡∏ñ‡∏≤‡∏°‡∏Ç‡∏ô‡∏≤‡∏î‡∏†‡∏≤‡∏û‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£
        print("\nüìê ‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏±‡∏ö‡∏Ç‡∏ô‡∏≤‡∏î‡∏†‡∏≤‡∏û‡πÑ‡∏´‡∏°?")
        print("1. ‡πÉ‡∏ä‡πâ‡∏Ç‡∏ô‡∏≤‡∏î‡∏ï‡πâ‡∏ô‡∏â‡∏ö‡∏±‡∏ö")
        print("2. ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Å‡∏ß‡πâ‡∏≤‡∏á (Width)")
        print("3. ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏π‡∏á (Height)")
        print("4. ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏ó‡∏±‡πâ‡∏á Width ‡πÅ‡∏•‡∏∞ Height")
        
        choice = input("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å (1-4): ").strip()
        
        target_w, target_h = None, None
        
        if choice == "2":
            target_w = int(input("‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Å‡∏ß‡πâ‡∏≤‡∏á‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£ (pixels): "))
        elif choice == "3":
            target_h = int(input("‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏π‡∏á‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£ (pixels): "))
        elif choice == "4":
            target_w = int(input("‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Å‡∏ß‡πâ‡∏≤‡∏á‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£ (pixels): "))
            target_h = int(input("‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏π‡∏á‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£ (pixels): "))
        
        # ‡πÇ‡∏´‡∏•‡∏î‡πÅ‡∏•‡∏∞‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏†‡∏≤‡∏û
        img, contours = load_and_process_image("image.png", target_w, target_h)
        
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á optimizer
        optimizer = DrawingOptimizer()
        
        # ‡πÅ‡∏™‡∏î‡∏á preview ‡πÅ‡∏•‡∏∞‡∏£‡∏±‡∏ö contours ‡∏ó‡∏µ‡πà‡∏Å‡∏£‡∏≠‡∏á‡πÅ‡∏•‡πâ‡∏ß
        valid_contours = optimizer.show_preview(img, contours)
        
        if not valid_contours:
            print("‚ùå ‡πÑ‡∏°‡πà‡∏°‡∏µ contours ‡∏ó‡∏µ‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ß‡∏≤‡∏î‡πÑ‡∏î‡πâ")
            return
        
        # ‡πÅ‡∏™‡∏î‡∏á‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÅ‡∏•‡∏∞‡∏£‡∏≠‡∏ï‡∏±‡πâ‡∏á origin ‡∏î‡πâ‡∏ß‡∏¢ mouse
        optimizer.check_keyboard_simple()
        
        if not optimizer.wait_for_origin_by_mouse():
            print("‚ùå ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏ï‡∏±‡πâ‡∏á origin - ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô")
            return
        
        if optimizer.should_stop:
            print("‚ùå ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô")
            return
        
        # ‡∏£‡∏≠‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏ï‡∏±‡∏ß‡∏Å‡πà‡∏≠‡∏ô‡∏ß‡∏≤‡∏î
        print("\n‚è≥ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ß‡∏≤‡∏î‡πÉ‡∏ô 3 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ... (‡∏Å‡∏î Ctrl+C ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å)")
        try:
            for i in range(3, 0, -1):
                if optimizer.should_stop:
                    print("‚ùå ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô")
                    return
                print(f"   {i}...")
                time.sleep(1)
        except KeyboardInterrupt:
            print("\n‚ùå ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡πÇ‡∏î‡∏¢‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ")
            return
        
        # ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ß‡∏≤‡∏î
        print("\nüé® ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ß‡∏≤‡∏î! (‡∏Å‡∏î Ctrl+C ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏´‡∏¢‡∏∏‡∏î‡∏â‡∏∏‡∏Å‡πÄ‡∏â‡∏¥‡∏ô)")
        try:
            optimizer.draw(valid_contours)
        except KeyboardInterrupt:
            print("\n‚õî ‡∏´‡∏¢‡∏∏‡∏î‡∏Å‡∏≤‡∏£‡∏ß‡∏≤‡∏î‡πÇ‡∏î‡∏¢‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ")
        
        print("\n‚úÖ ‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô")
        
    except KeyboardInterrupt:
        print("\n‚ùå ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏Å‡∏î Ctrl+C - ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô")
    except FileNotFoundError as e:
        print(e)
    except Exception as e:
        print(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    main()